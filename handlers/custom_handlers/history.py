import json
from datetime import datetime, date
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from aiogram_calendar.schemas import SimpleCalAct
from keyboards.inline.cancel import get_cancel_kb_markup
from keyboards.inline.watch_list import get_watchlist_kb_markup
from states.history import HistoryState
from utils.misc.movie_card import get_movie_card_markup
from utils.misc.types import search_types
from database.CRUD import get_histories, get_films_by_history, update_user_watchlist
from handlers.utils.pagination import Pagination, DataStructure, CurrentData
from keyboards.inline.history_show import get_history_show_kb_markup


router = Router(name=__name__)
pagination = Pagination()

search_commands = {search_types[item]["text"] for item in search_types}
date_template_str = "%d.%m.%Y"

calendar = SimpleCalendar(locale="ru-RU", show_alerts=True)
calendar.set_dates_range(datetime(2022, 1, 1), datetime(2026, 12, 31))

today: datetime = datetime.now()

watched_marks = {
    "watched": "<b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω -</b> ‚úÖ",
    "not_watched": "<b>–ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω -</b> ‚ùå",
}


def get_new_film_structured(movie_obj: dict, watched_list: set[str]) -> DataStructure:
    """
        –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–∏–ª—å–º–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–¥ –∏–ª–∏ –ø–æ—Å–ª–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.
    Args:
        movie_obj: –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–∏–ª—å–º–µ
        watched_list: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ ID –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤

    Returns:
        new_film: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –¥–æ –∏ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    is_watched: bool = (
        str(movie_obj["id"]) in watched_list if not watched_list is None else False
    )

    movie_str: str = (
        f"{watched_marks["not_watched"]}\n\n{get_movie_card_markup(movie_obj)}"
    )

    if is_watched:
        movie_str = f"{watched_marks["watched"]}\n\n{get_movie_card_markup(movie_obj)}"

    new_film: DataStructure = {
        "data": movie_str,
        "kb_before": get_watchlist_kb_markup(
            txt=f"{'–£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö' if is_watched else '–î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ'}",
            cb=f"watchlist_toggle#{movie_obj["id"]}#{True if is_watched else False}",
        ),
        "kb_after": None,
    }

    return new_film


async def date_picker(
    callback_query: CallbackQuery,
    callback_data: SimpleCalendarCallback,
    state: FSMContext,
) -> str | None:
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞.

    Returns:
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞.
    """
    data = await state.get_data()
    result: str | None = None

    selected, selected_date = await calendar.process_selection(
        callback_query, callback_data
    )

    if selected:
        result = selected_date.strftime(date_template_str)
    elif callback_data.act == SimpleCalAct.cancel:
        await callback_query.bot.delete_message(
            message_id=data["calendar_id"], chat_id=callback_query.message.chat.id
        )

        await state.clear()

        await callback_query.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞!")

    return result


@router.message(StateFilter(None), F.text == search_types["history"]["text"])
@router.message(StateFilter(None), Command("history"))
async def get_history_dates(message: Message, state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞ –≤—ã–≤–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""

    await state.set_state(HistoryState.history_start)

    msg = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤",
        reply_markup=await calendar.start_calendar(year=today.year, month=today.month),
    )

    await state.update_data(calendar_id=msg.message_id)


@router.callback_query(HistoryState.history_start, SimpleCalendarCallback.filter())
async def get_start_date(
    callback_query: CallbackQuery,
    callback_data: SimpleCalendarCallback,
    state: FSMContext,
) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
    data = await state.get_data()
    start_date: str = await date_picker(callback_query, callback_data, state)

    if not start_date is None:
        await state.update_data(history_start=start_date)
        await callback_query.bot.delete_message(
            message_id=data["calendar_id"], chat_id=callback_query.message.chat.id
        )

        msg = await callback_query.message.answer(
            f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ {start_date}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É",
            reply_markup=await calendar.start_calendar(
                year=today.year, month=today.month
            ),
        )

        await state.update_data(calendar_id=msg.message_id)
        await state.set_state(HistoryState.history_end)


@router.callback_query(HistoryState.history_end, SimpleCalendarCallback.filter())
async def get_end_date(
    callback_query: CallbackQuery,
    callback_data: SimpleCalendarCallback,
    state: FSMContext,
) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""

    end_date: str = await date_picker(callback_query, callback_data, state)

    if not end_date is None:
        await state.set_state(HistoryState.history_show)
        await state.update_data(history_end=end_date)

        data = await state.get_data()

        start_date: date = datetime.strptime(data["history_start"], "%d.%m.%Y").date()
        end_date: date = datetime.strptime(data["history_end"], "%d.%m.%Y").date()

        if start_date > end_date:
            [start_date, end_date] = [end_date, start_date]

        user_data = await get_histories(
            user_id=callback_query.from_user.id,
            date_start=start_date,
            date_end=end_date,
        )

        if not user_data is None:
            if not user_data.watched_list is None:
                await state.update_data(
                    watched_list=set(user_data.watched_list.split(","))
                )
            else:
                await state.update_data(watched_list=set())

            await callback_query.bot.delete_message(
                message_id=data["calendar_id"], chat_id=callback_query.message.chat.id
            )

            await state.update_data(calendar_id=None)

            await callback_query.message.answer(
                text=f"–ü–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ —Å {start_date.strftime(date_template_str)} –ø–æ {end_date.strftime(date_template_str)}"
            )

            histories_list: list[DataStructure] = []

            for histrory in user_data.user_histories:
                new_history: DataStructure = {
                    "data": f"<b>üóì –î–∞—Ç–∞ –ø–æ–∏—Å–∫–∞: {histrory.created_at.strftime(date_template_str)}</b>\n\n{histrory.history_params}",
                    "kb_before": get_history_show_kb_markup(
                        txt="–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º—ã", cb=f"history_id#{histrory.id}"
                    ),
                    "kb_after": None,
                }

                histories_list.append(new_history)

            await pagination.clear_data()
            await pagination.set_data(histories_list)
            await pagination.send_character_page(callback_query.message)
        else:
            await callback_query.bot.delete_message(
                message_id=data["calendar_id"], chat_id=callback_query.message.chat.id
            )

            await callback_query.message.answer(
                text=f"–ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–¥ —Å {start_date.strftime(date_template_str)} –ø–æ {end_date.strftime(date_template_str)} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )

            await state.clear()


@router.message(
    HistoryState.history_start, ~F.text.startswith("/") & ~F.text.in_(search_commands)
)
@router.message(
    HistoryState.history_end, ~F.text.startswith("/") & ~F.text.in_(search_commands)
)
async def not_date_selected(message: Message) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã - 'Cancel'.")


@router.message(
    HistoryState.history_show, ~F.text.startswith("/") & ~F.text.in_(search_commands)
)
@router.message(
    HistoryState.films_show, ~F.text.startswith("/") & ~F.text.in_(search_commands)
)
async def unknown_text(message: Message, state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤/—Ç–µ–∫—Å—Ç–∞."""
    data = await state.get_data()
    cb_ids = data["cancel_cbs_ids"] if data.get("cancel_cbs_ids") else []

    msg = await message.answer(
        "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ - –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'",
        reply_markup=get_cancel_kb_markup(),
    )

    cb_ids.append(msg.message_id)
    await state.update_data(cancel_cbs_ids=cb_ids)


@router.message(
    StateFilter(HistoryState), F.text.startswith("/") | F.text.in_(search_commands)
)
async def unknowns_commands(message: Message, state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–∑–æ–≤–∞ –∫–æ–º–º–∞–Ω–¥ –∏–ª–∏ –∫–æ–ª–ª–±—ç–∫ –¥–∞–Ω–Ω—ã—Ö (–∫–æ–º–º–∞–Ω–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞) –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞.
    –î–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫ –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    data = await state.get_data()
    cb_ids = data["cancel_cbs_ids"] if data.get("cancel_cbs_ids") else []

    msg = await message.answer(
        '–û—Ç–≤–µ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ –∑–Ω–∞–∫–∞ "/" –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∫–æ–º–º–∞–Ω–¥ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞. \n'
        '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ - –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫.',
        reply_markup=get_cancel_kb_markup(),
    )

    cb_ids.append(msg.message_id)
    await state.update_data(cancel_cbs_ids=cb_ids)


@router.callback_query(StateFilter(HistoryState), F.data == "cancel")
async def cancel_callback(call: CallbackQuery, state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫, —Å–±—Ä–æ—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –Ω–µ –Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–ª–µ–Ω–¥–∞—Ä—å, –∏—Å—Ç—Ä–∏—é, —Ñ–∏–ª—å–º—ã)"""
    data = await state.get_data()
    pagination_data: CurrentData = await pagination.get_current_data()

    if not data["calendar_id"] is None:
        await call.bot.delete_message(
            message_id=data["calendar_id"], chat_id=call.message.chat.id
        )

    if not pagination_data.get("pagination_msg_id") is None:
        await call.bot.delete_message(
            message_id=pagination_data["pagination_msg_id"],
            chat_id=call.message.chat.id,
        )

    if not data.get("cancel_cbs_ids") is None:
        for cb_id in data["cancel_cbs_ids"]:
            await call.bot.delete_message(
                chat_id=call.message.chat.id, message_id=cb_id
            )

    await state.clear()

    await call.message.answer(
        "–í—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω. \n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ - –∫–æ–º–∞–Ω–¥–∞ /start. \n"
        "–î–ª—è –≤—ã–∑–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º - /help.",
    )


@router.callback_query(HistoryState.history_show, F.data.split("#")[0] == "character")
@router.callback_query(HistoryState.films_show, F.data.split("#")[0] == "character")
async def characters_page_callback(call: CallbackQuery) -> None:
    """–ö–æ–ª–ª–±—ç–∫ —Ñ—É–Ω–∫—Ü–∏—è - —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–∞–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    page = int(call.data.split("#")[1])

    await pagination.send_character_page(call.message, page, is_next_page=True)


@router.callback_query(HistoryState.history_show, F.data.split("#")[0] == "history_id")
async def show_films_in_history(call: CallbackQuery, state: FSMContext) -> None:
    """–ö–æ–ª–ª–±—ç–∫ —Ñ—É–Ω–∫—Ü–∏—è - —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –≤—ã–≤–æ–¥ —Ñ–∏–ª—å–º–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞"""
    await state.set_state(HistoryState.films_show)

    state_data = await state.get_data()

    watched_list = state_data["watched_list"]

    await call.bot.delete_message(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )

    history_id: str = call.data.split("#")[1]

    films_list: list | None = await get_films_by_history(int(history_id))

    if not films_list is None:
        movies_list: list[DataStructure] = []

        for movie in films_list:
            movie_obj: dict = json.loads(movie.film_data)

            new_film: DataStructure = get_new_film_structured(movie_obj, watched_list)

            movies_list.append(new_film)

        await pagination.clear_data()
        await pagination.set_data(data_list=movies_list, additional_data=watched_list)
        await pagination.send_character_page(call.message)
    else:
        await call.message.answer(
            f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—á—É–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –µ—â–µ —Ä–∞–∑!"
        )

        await state.clear()


@router.callback_query(
    HistoryState.films_show, F.data.split("#")[0] == "watchlist_toggle"
)
async def watchlist_toggle_callback(call: CallbackQuery) -> None:
    """–ö–æ–ª–ª–±—ç–∫ —Ñ—É–Ω–∫—Ü–∏—è - —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–∞–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    """
    film_id = call.data.split("#")[1]
    is_watched = True if call.data.split("#")[2] == "True" else False

    current_data: CurrentData = await pagination.get_current_data()

    page_data = current_data.get("page_data")["data"]
    watched_list: set = current_data.get("additional_data")

    if is_watched:
        new_movie_str = page_data.replace(
            watched_marks["watched"], watched_marks["not_watched"]
        )
        watched_list.remove(film_id)
        is_watched = False
    else:
        watched_list.add(film_id)
        new_movie_str = page_data.replace(
            watched_marks["not_watched"], watched_marks["watched"]
        )
        is_watched = True

    await update_user_watchlist(call.from_user.id, watched_list)

    new_data: DataStructure = {
        "data": new_movie_str,
        "kb_before": get_watchlist_kb_markup(
            txt=f"{'–£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö' if is_watched else '–î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ'}",
            cb=f"watchlist_toggle#{film_id}#{is_watched}",
        ),
        "kb_after": None,
    }

    await pagination.update_data(new_data, watched_list)
    await pagination.send_character_page(call.message, is_next_page=True)
